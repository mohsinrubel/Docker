Learning Docker [Day 7] ðŸš€

âœ… Let's learn about the Port Expose/Export /Mapping & Network Management concept in Docker.

â˜‘ How to Expose Ports in Docker

In this post, we will see some network parts of containers. We will see how to enable communication of the container to the outside world or to the other containers. We do this by exposing ports and mapping these ports.

â˜‘ Need of exposing ports:

â€¢ When a container is created using docker create or docker run, by default it does not publish any of its ports to the outside world.

â€¢ In order to make a port available to services outside of Docker, or to Docker containers which are not connected to the containerâ€™s network, we can use the -P or -p flag. This creates a firewall rule which maps a container port to a port on the Docker host to the outside world.

â€¢ -p or â€“publish list: Publishes a containerâ€™s port(s) to the host.

â€¢ -P or â€“publish-all: Publishes all exposed ports to random ports.

Step 1: docker run -td --name webserver -p 80:80 ubuntu

Step 2: Verify conatiner is shown in running but in detaching mode.

Step 3: for entering in this conatiner to run: docker exec -it
webserver /bin/bash

Step 4: Container:/# apt-get update -y
apt-get install apache2 -y

Step 5: ls --> var --> www --> html --> (HTML file is there)

Step 6: Create new HTML file: echo "Hello Docker" > akash.html

Step 7: Exit from this conatiner and Verify container port is mapped or not.

â˜‘ Docker Networking

1) Bridge: The default network driver. Bridge networks apply to containers running on the same Docker daemon host.

2) Host: For standalone containers, remove network isolation between the container and the Docker host, and use the hostâ€™s networking directly.

3) Overlay: Overlay networks connect multiple Docker daemons together and enable swarm services to communicate with each other. You can also use overlay networks to facilitate communication between a swarm service and a standalone container, or between two standalone containers on different Docker daemons.

â€¢ User-defined bridges provide better isolation.
â€¢ Containers can be attached and detached from user-defined networks on the fly.
â€¢ Each user-defined network creates a configurable bridge.

â˜‘ Managing User-defined bridge network

â€¢ docker network create -d bridge my-bridge-network (Basic command)

â€¢ docker network rm my-net (To remove the network)

â€¢ docker network create -d overlay my-bridge-network (To connect to multiple daemons)

â€¢ docker network create --driver=bridge --subnet=172.28.0.0/16
 --ip-range=172.28.5.0/24
 --gateway=172.28.5.254
 my-bridge-network

â€¢ docker create --name my-nginx --network my-bridge-network --publish 8080:80 nginx:latest (To create a container without start state)

â€¢ docker network disconnect docker0 my-nginx